name: Backend Prod CI/CD

on:
  pull_request:
    branches: [ "prod" ]
  push:
    branches: [ "prod" ]

env:
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_PR }}
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/ufit:latest

jobs:
  ############################################################
  # PR 단계 : Build & Test만 수행 (CI 전용)
  ############################################################
  test:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    env:
      TZ: 'Asia/Seoul'

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Generate application.yml files
        run: |
          mkdir -p ./src/main/resources ./src/test/resources
          echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.yml
          echo "${{ secrets.APPLICATION_TEST }}" > ./src/test/resources/application.yml

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build and Test
        run: ./gradlew clean build

      - name: Slack Notify (Success)
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: repo,message,commit,author,ref
          custom_payload: |
            {
              "attachments": [{
                "color": "good",
                "title": "[Backend] :white_check_mark: PR CI 성공",
                "title_link": "${{ github.event.pull_request.html_url }}",
                "fields": [
                  { "title": "브랜치", "value": "${{ github.ref_name }}", "short": true },
                  { "title": "작성자", "value": "${{ github.actor }}", "short": true },
                  { "title": "PR 제목", "value": "${{ github.event.pull_request.title }}" }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK }}

      - name: Slack Notify (Failure)
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: repo,message,commit,author,ref
          custom_payload: |
            {
              "attachments": [{
                "color": "danger",
                "title": "[Backend] :x: PR CI 실패",
                "title_link": "${{ github.event.pull_request.html_url }}",
                "fields": [
                  { "title": "브랜치", "value": "${{ github.ref_name }}", "short": true },
                  { "title": "작성자", "value": "${{ github.actor }}", "short": true },
                  { "title": "PR 제목", "value": "${{ github.event.pull_request.title }}" }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK }}

  ############################################################
  # Push 단계 : Docker build + Deploy 수행
  ############################################################
  build-and-deploy:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    env:
      TZ: 'Asia/Seoul'

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Generate application.yml files
        run: |
          mkdir -p ./src/main/resources ./src/test/resources
          echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.yml
          echo "${{ secrets.APPLICATION_TEST }}" > ./src/test/resources/application.yml

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Build Docker image
        run: docker build . -f Dockerfile -t $IMAGE_NAME

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Push Docker image
        run: docker push $IMAGE_NAME

      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: 22
          script: |
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_HUB_TOKEN }}
            docker pull ${{ secrets.DOCKER_USERNAME }}/ufit:latest
            docker stop ufit_server || true
            docker rm ufit_server || true
            docker-compose pull
            docker-compose up -d --force-recreate
            
      - name: Slack Notify (Success)
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: repo,message,commit,author,ref
          custom_payload: |
            {
              "attachments": [{
                "color": "good",
                "title": "[Backend] :rocket: 배포 성공",
                "fields": [
                  { "title": "브랜치", "value": "${{ github.ref_name }}", "short": true },
                  { "title": "작성자", "value": "${{ github.actor }}", "short": true }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK }}

      - name: Slack Notify (Failure)
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: repo,message,commit,author,ref
          custom_payload: |
            {
              "attachments": [{
                "color": "danger",
                "title": "[Backend] :fire: 배포 실패",
                "fields": [
                  { "title": "브랜치", "value": "${{ github.ref_name }}", "short": true },
                  { "title": "작성자", "value": "${{ github.actor }}", "short": true }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK }}
